1.프레임워크 기초 
 
1.1일반적인 웹 시스템 
정적 컨텐츠 (HTML)
 웹 프라우저가 웹 서버로부터 저장된 HTML 을 읽어와 표현

1.2동적 컨텐츠 (JSP) 
 웹 브라우저가 웹 서버에 동적 페이지를 요청하면 이 요청을 애플리케이션 
서버가 실행하고 처리결과를 브라우저가 HTML 형식으로 받아서 표현 

'HTML' 'CSS' '자바스크립트'가 정적 콘텐츠에 해당됨 

JSP ,Servelt : 웹 컨테이너가 세션 관리 
 웹페이지와 비즈니스 로직 분리 
 자바 언어 사용 오브젝트 지향의 장점 '재사용'
EJB : 분산 트랜잭션 처리 컴포넌트
 JSP, servlet 으로 웹 프로젠테이션 처리 
 EJB 분산 객체로 비즈니스 로직 처리 
 Spirng : DixAOP 컨테이너 
 경량 컨테이너 ,POJO 객체
 웹 클라우드 모바일 등 다양한 자바 기반의 애플리케이션을
만들기 위한 프레임워크


EJB(Enterprise JavaBean)
- 분산 환경에서의 트랜잭션 처리를 위한 컴포넌트 
 -->트랜잭션이란 데이터베이스의 상태를 변화시키기 위해서 수행하는 
      작업의 단위 
 --> 쪼개질 수 없는 업무처리의 단위
 --> 분산 트랜직션이란 2개 이상의 네트워크 상의 시스템간의 트랜잭션
-JSP와 서블릿은 프리젠테이션 구현
-EJB은 비즈니스 로직을 구현
 -->비즈니스 로직이란 컴퓨터 프로그램에서 실세계의 규칙에 따라 
     데이터를 생성 표시 저장 변경 하는 부분을 일컫음
 -->어떠한 작업이 이루어 질때 진행되어야할 논리 
      EX)아이디 생성 -- 아이디 입력->중복확인 -> 비밀번호 설정 생성 

Spring Framework
 2003년 Rod Johnson이 개발
 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임 워크
  -->프레임워크란 애플리케이션 개발에 바탕이 되는 템플릿 같은 역할을 하는
      클래스들과 인터페이스의 집합. 즉 애플리케이션을 구축할때 
      모든 애플리케이션의 공통적인 부분을 제공해준다.
 POJO(Plain Old Java OBject) 지원을 통해 기존 EJB 의 복잡성을 줄임
 POJO는 특정 인터페이스 또는 클래스를 상속받을 필요가 없는 가벼운 객체를 의미 
 대한민국 전자정부 프레임워크의 기반기술

1.3아키텍처 중요성
 서버 애플리케이션 구조의 변화 
 Client-server 구조에서 WEB server 기반 으로 진화 
 요구사항 변경 잦은 기능 추가 발생, 미래 환경의 빠른 변화에 대응 필요 
 비즈니스 로직과 UI 로직이 서버에 종속

 서버 애플리케이션 특징에 적합한 구조가 필요 

웹 애플리케이션 아키텍처 

 물리층인 티어와 논리층인 레이어로 구분 
 
 클라이언트 층 (PC)  //중간층 (애플리케이션)// EIS 층(DB,레거시시스템)

1.4웹 애플리케이션 서버 레이어
 프리젠테이션 층 (Controller) // 비즈니스 로직 층(Service)       //    데이터 엑세스층(DAO)
 페이지 화면 전환,동작제어   //   유스케이스 표현되는 특정 업무 처리 // 서비스 진행 관련 정보 

오목 형 레이어 

 표현 층 또는 영속화 매커니즘이 변경 되어도 비즈니스 로직층에는 영향 최소화 
 -->영속성 : 오래도록 유지되는

프리젠 테이션 층 
- 사용자 인터페이스와 컨트롤러를 제공하는 역할
- 컨트롤러는 사용자 인터페이스를 통해 사용자의 입력을 받아 적정한 로직을 호출하고 
  그 결과를 사용자 인터페이스로 변환
- 사용자 인터페이스는 화면 인터페이스를 의미 
-->즉 표면적으로 보여주는 층을 의미함. 앵귤러 클라이언트 프레임워크가 해당

모델 1 방식
jsp만 구현 개발하거나 java bean 을 포함하여 개발하는 방식을 의미 
jsp에 뷰와 비즈니스 로직이 혼재되어 복잡도가 높음 유지보수가 어렵다.

--> 컴포넌트 형태로 제작된 자바 모듈
      모듈화 되어있기 때문에 효율성, 재사용 등의 측면에서 장점이 있다.
모델 2 방식
모델 :뷰에 필요한 비즈니스 영역의 로직을처리 
뷰 : 비즈니스 영역에 대한 프레젠테이션뷰를 담당
컨트롤러 : 사용자의 입력처리와 화면의 흐름제어를 담당

비즈니스 로직 층의 역할
- 유스케이스로 표현되는 특정 업무 처리를 위한 서비스와 도메인으로 구성
- 개발, 운영 업무의 경우 웹 애플리케이션의 기능 추가와 변경은 비즈니스 로직 변경

트랜잭션 스크립트 방식
-비즈니스 로직이 적은 일반적인 입출력 애플리 케이션일 경우 
-비즈니스 로직은 서비스 클래스에 포함
-도메인은 가능한 한 로직을 포함하지 않고 단순한 값만 저장

1.5도메인 모델
- 에릭 에반스가 제안한 도메인 주도 설계 개념
 데이터와 애플리케이션을 설계할 때 업무 도메인 별로 분리하여 설계
 시스템 요구를 기술하기 위해 도메인 전문가가 도메인 제공 
- 최근 대규모 시스템의 복잡한 비즈니스 로직을 방지하기위한 대안
- 도메인 패키지에 도메인 로직을 두는 방식 

스프링 프레임워크는 도메인 모델의 구축과 별도의 큰 시너지 효과는 없음
- 도메인의 생성과 관리는 DI 컨테이너가아닌  데이터 액세스 층의 구조에 의존

트랜잭션 관리
트랜잭션의 ACID 특성 중 원자성과 독립성을 관리 
 원자성 : 트랜잭션 내의 모든 처리는 전부 실행됬거나 아무것도 실행되지 않음
 독립성 : 병행해서 실행되는 트랙잭션 간에는 간섭받지않고 독립적임

트랜잭션 경계
 트랜잭션 경계는 프레젠 테이션과 비즈니스로직 층 사이에 존재
 프리젠테이션 층에 공개된 비즈니스 로직 층의 서비스 클래스 가 트랜잭션의 시작과 끝

명시적 트랜잭션
트랜잭션 시작과 커밋 , 롤백과 같은 RDB 에 대한 트랜잭션 관리를 소스코드로 명시 
선언적 트랜잭션
프레임워크에서 제공하는 정의 파일 선언을 통해 트랜잭션 관리 

1.6데이터 액세스 층 

RDB 액세스를 비즈니스 로직으로 숨기고 비즈니스 로직에 필요한 데이터를 테이블에서 취득해서
오브젝트에 매칭 

DB 엑세스 프레임워크의 종류 
Hybernate : 대표적인 ORM 
MyBatis, 스프링 JDBC SQL 문 사용 전제로 한 DB 액세스 프레임워크
데이터 액세스 층의 설계 지침
-커넥션 풀을 사용한다.
-RDB 제품이 바뀌어도 구현에 영향을 미치지 않는다. -> ? 문법이 바뀌면 구현에 영향을..안주게 문자열로 구간지정?
-이용하는 RDB에 의존적인 SQL 문을 기술하지 않는다 -> 대중적인 SQL문을 사용하라 
 
부품화 
-개발 효율성과 유연성 향상을 위해서는 티어 또는 레이어를 통해 부품화 
-부품이 큰 쪽이 티어, 레이어 그리고 작은 부품이  패키지 또는 컴포넌트 
-부품화를 위해서는 인터페이스가 중요 

부품화를 위해서는 2가지 중요점
-연결해야 할 부품 간에 결국 중요한 부품이 인터페이스를 가진다.
-절대적 기준은 없다. 성능이 허용하는 한 부품화 할 필요가 있는 만큼 부품화 한다.

1.7 웹 애플리케이션이 안고 있는 문제 

-EJB(Enterprise Java Beans)의 문제. 현재 해결 
-오브젝트 생명 주기 
 서블릿 인트턴스의 호출로 인한 성능저하 및 메모리 압박 -'싱글톤'구현 필요
 HTTP Sesson// Request// Application 의 경우  객체 생명주기 관리 필요 

- 부품화 문제 
 인터페이스 구현과 비의존 구현하기 위해서  고도의 기술이 필요 
 팩토리 매서드는 개발자가 new를 사용하지 않고 인스턴트화 추천 

-기술 은닉과 부적절한 기술 은닉
 여러 클래스에 걸쳐 존재하는 예외 처리, 로깅, 트랜잭션은 프로그램 가독성을 훼손하고 
 부품화와 테스팅에 비 효과적 .

-> 문제 해결은 스프링 프레임워크 

오프젝트 생명주기 -> DI(Dipendency Injection) 컨테이너로 해결
무품화 문제 -> DI컨테이너로 해결 
기술은닉 ,부적절한 기술은닉 -> AOP(Aspect Oriented Programming)으로 해결 

1.8 스프링 개요 
Spring Framework 의 주요 특징
- POJO(Plain Old Java Object) 관리 
 특정한 인터페이스를 구현하거나 상속을 받을 필요가 없는 가벼운 객체를 관리 
- IOC (Inversion of Control)경량 컨테이너 
 필요에 따라 스프링 프레임워크에서 사용자의 코드를 호출
 일반 오브젝트의 생애 주기 관리나 오브젝트 간의  의존관계를 해결하는 아키텍처를 구현
- DIxAOP(Dependency Injection, Aspect Oriented Programming) 지원
 DI : 각각의 계층이나 서비스들 간에 의존성이 존재 할 경우 프레임워크가 연결해줌 
 AOP : 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우
         해당 기능을 분리하여 관리 (프로그램 가독성, 기술 은닉)
-O/R  매핑 프레임워크 지원
 완성도가 높은 데이터베이스 처리 라이브러리와  연결할 수 있는 인터페이스를 제공
-스프링 데이터를 통한 다양한 데이터 연동 기능
 그래프 DB, 다큐먼트 DB, Neo4j, Reids, Cassandra,Sola 등)
-스프링 배치 
 대량의 데이터를 일괄 처리, 병행 처리할 수  있는 템플릿 제공
-스프링 시큐리티 
 인증, 인가 기능 제공
 베이직 인증 또는 OAuth(Open Authorization) 개방형 표준 인증 서비스 제공

 







